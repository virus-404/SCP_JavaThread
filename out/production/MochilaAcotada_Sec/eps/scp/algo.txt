package eps.scp;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.lang.Thread;
import java.util.concurrent.locks.*;

public class MochilaCeroUno extends Thread {
    protected List<Item> itemList  = new ArrayList<Item>();
    protected int maxWeight        = 0;
    protected int solutionWeight   = 0;
    protected int profit           = 0;
    protected boolean calculated   = false;

    private List< List<Integer> > table = new ArrayList< List<Integer> >();
    private  int [] indexes ;


    public MochilaCeroUno() {}

    public MochilaCeroUno(int _maxWeight) {
        setMaxWeight(_maxWeight);
    }

    public MochilaCeroUno(List<Item> _itemList) {
        setItemList(_itemList);
    }

    public MochilaCeroUno(List<Item> _itemList, int _maxWeight) {
        setItemList(_itemList);
        setMaxWeight(_maxWeight);
    }

    // calculte the solution of 0-1 knapsack problem with dynamic method:

    private class Thread_calc extends Thread{

        private int ID;
        private int type;
        private List<Integer> reference;
        private List<Integer> result;
        private Lock lock = new ReentrantLock();

        private Thread_calc (int ID, int type, List<Integer> reference) {
            this.ID = ID;
            this.type=type;
            this.reference=reference;
            this.result = new ArrayList<Integer>();

        }

        public int getType() {
            return type;
        }

        public List<Integer> getResult() {
            return result;
        }

        public List<Integer> getReference() {
            return reference;
        }

        public void setResult(List<Integer> result) {
            this.result = result;
        }

        @Override
        public void run() {

            List<Integer> actual = new ArrayList<Integer>();
            List<Integer> previuous = this.getReference();
            int i = type;


            for (int j = 0; j <= maxWeight; j++) {
                if (j > 0) {
                    int wH = itemList.get(i - 1).getWeight(); //pes anterior de la columna
                    if (wH > j)
                        actual.add(previuous.get(j)); //afegeix fila actual l'anterior
                    else
                        actual.add(Math.max(previuous.get(j), itemList.get(i-1).getValue() + previuous.get(j-wH))); //afegeix fila actual max( previa, )
                } else {
                    actual.add(0);
                }
            }

            lock.lock();
            table.add(actual);
            lock.unlock();
            setResult(actual);

        }


    }
    public List<Item> calcSolution()  {
        int n = itemList.size();
        int max_thread  = 4;
        indexes = new int[max_thread];

        setInitialStateForCalculation();

        if (n > 0  &&  maxWeight > 0) {
            List<Integer> actual = new ArrayList<Integer>();
            int counter  = 0;
            int free_thread = 0;
            Thread_calc[] threads = new Thread_calc[max_thread];

            table.add(actual);

            for (int j = 0; j <= maxWeight; j++)
                actual.add(0);

            for (int i = 1; i <= n; i++) {

                if (counter < max_thread){
                    indexes[free_thread]  = 0; 
                    threads[free_thread] = new Thread_calc(free_thread,i,actual);
                    threads[free_thread].start();
                    actual = threads[free_thread].result;
                    counter++;
                    free_thread++;
                }

                int tmp = 0;

                while (counter + 1 == max_thread){
                    if (threads[tmp].isAlive()) {
                        tmp ++;
                    } else {
                        free_thread = tmp;
                        counter--;
                    }

                    if (tmp == max_thread)  tmp = 0;

                }

            }
            profit = actual.get(maxWeight);

            for (int i = n, j = maxWeight; i > 0  &&  j >= 0; i--) {
                int tempI   = table.get(i).get(j);
                int tempI_1 = table.get(i-1).get(j);
                if ((i == 0  &&  tempI > 0) ||  (i > 0  &&  tempI != tempI_1)) { //
                    Item iH = itemList.get(i-1);
                    int  wH = iH.getWeight();
                    iH.setInKnapsack(1);
                    j -= wH;
                    solutionWeight += wH;
                }
            } // for()
            calculated = true;
        } // if()
        return itemList;
    }

    // add an item to the item list
    public void add(String name, int weight, int value) {
        if (name.equals(""))
            name = "" + (itemList.size() + 1);
        itemList.add(new Item(name, weight, value));
        setInitialStateForCalculation();
    }

    // add an item to the item list
    public void add(int weight, int value) {
        add("", weight, value); // the name will be "itemList.size() + 1"!
    }

    // remove an item from the item list
    public void remove(String name) {
        for (Iterator<Item> it = itemList.iterator(); it.hasNext(); ) {
            if (name.equals(it.next().getName())) {
                it.remove();
            }
        }
        setInitialStateForCalculation();
    }

    // remove all items from the item list
    public void removeAllItems() {
        itemList.clear();
        setInitialStateForCalculation();
    }

    public int getProfit() {
        if (!calculated)
            calcSolution();
        return profit;
    }

    public int getSolutionWeight() {return solutionWeight;}
    public boolean isCalculated() {return calculated;}
    public int getMaxWeight() {return maxWeight;}

    public void setMaxWeight(int _maxWeight) {
        maxWeight = Math.max(_maxWeight, 0);
    }

    public void setItemList(List<Item> _itemList) {
        if (_itemList != null) {
            itemList = _itemList;
            for (Item item : _itemList) {
                item.checkMembers();
            }
        }
    }

    // set the member with name "inKnapsack" by all items:
    private void setInKnapsackByAll(int inKnapsack) {
        for (Item item : itemList)
            if (inKnapsack > 0)
                item.setInKnapsack(1);
            else
                item.setInKnapsack(0);
    }

    // set the data members of class in the state of starting the calculation:
    protected void setInitialStateForCalculation() {
        setInKnapsackByAll(0);
        calculated     = false;
        profit         = 0;
        solutionWeight = 0;
    }
} // class
